---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import PostForm from '../../components/PostForm.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';

interface Post {
  id: number;
  title: string;
  description: string;
  slug: string;
  [key: string]: any;
}

let posts: Post[] = [];
try {
  const response = await fetch(`${Astro.url.origin}/api/posts`);
  if (response.ok) {
    posts = await response.json();
  }
} catch (error) {
  console.error('Failed to fetch posts:', error);
}

// Get the post data if we're editing
const searchParams = Astro.url.searchParams;
const editingPostId = searchParams.get('edit');
const editingPost = editingPostId ? posts.find(post => post.id.toString() === editingPostId) : undefined;

// Show form if we're editing or if showForm is set
const showForm = editingPostId || searchParams.get('showForm') === 'true';
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <style>
      main {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
      }

      .admin-controls {
        margin-bottom: 30px;
      }

      .create-btn {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
      }

      .create-btn:hover {
        background-color: #45a049;
      }

      .posts-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
      }

      .post-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        background-color: white;
      }

      .post-card h3 {
        margin: 0 0 10px 0;
      }

      .post-actions {
        display: flex;
        gap: 10px;
        margin-top: 15px;
      }

      .edit-btn, .delete-btn, .read-btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        display: inline-block;
        text-align: center;
        font-size: 14px;
        min-width: 80px;
      }

      .read-btn {
        background-color: #6c757d;
        color: white;
        text-decoration: none;
      }

      .read-btn:hover {
        background-color: #5a6268;
      }

      .edit-btn {
        background-color: #4a9eff;
        color: white;
      }

      .delete-btn {
        background-color: #ff4a4a;
        color: white;
      }

      .post-form-section {
        margin-bottom: 30px;
        display: none;
      }

      .post-form-section.visible {
        display: block;
      }

      h1, h2 {
        margin-bottom: 1em;
      }

      .cancel-btn {
        background-color: #6c757d;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        margin-left: 10px;
      }

      .cancel-btn:hover {
        background-color: #5a6268;
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <h1>Blog Admin</h1>
      
      <section class="admin-controls">
        <button id="newPostBtn" class="create-btn">Create New Post</button>
      </section>

      <section id="postForm" class={`post-form-section ${showForm ? 'visible' : ''}`}>
        <h2 id="formTitle">Create New Post</h2>
        <PostForm post={editingPost} />
        <button id="cancelBtn" class="cancel-btn">Cancel</button>
      </section>

      <section class="posts-list">
        <h2>All Posts</h2>
        <div class="posts-grid">
          {posts.map((post: Post) => (
            <div class="post-card">
              <h3>{post.title}</h3>
              <p>{post.description}</p>
              <div class="post-actions">
                <a href={`/blog/${post.slug}`} class="read-btn">
                  Read
                </a>
                <button class="edit-btn" data-post={JSON.stringify(post)}>
                  Edit
                </button>
                <button class="delete-btn" data-id={post.id}>
                  Delete
                </button>
              </div>
            </div>
          ))}
        </div>
      </section>
    </main>
    <Footer />

    <script>
      const newPostBtn = document.getElementById('newPostBtn');
      const cancelBtn = document.getElementById('cancelBtn');
      const postForm = document.getElementById('postForm');
      const formTitle = document.getElementById('formTitle');
      
      // Show new post form
      newPostBtn?.addEventListener('click', () => {
        const form = postForm?.querySelector('form');
        if (form) {
          // Clear form data
          form.reset();
          // Remove any existing hidden id field
          const idInput = form.querySelector('input[name="id"]');
          if (idInput) idInput.remove();
          // Clear all form fields
          form.querySelectorAll('input:not([type="hidden"]), textarea').forEach((input) => {
            (input as HTMLInputElement | HTMLTextAreaElement).value = '';
          });
          form.dataset.isEditing = 'false';
        }
        postForm?.classList.add('visible');
        formTitle!.textContent = 'Create New Post';
      });

      // Hide form on cancel
      cancelBtn?.addEventListener('click', () => {
        postForm?.classList.remove('visible');
      });

      // Handle edit button clicks
      document.querySelectorAll('.edit-btn').forEach(button => {
        button.addEventListener('click', (e) => {
          const post = JSON.parse((e.target as HTMLElement).dataset.post!);
          const form = postForm?.querySelector('form');
          
          if (form) {
            // Set editing mode
            form.dataset.isEditing = 'true';
            
            // Add hidden id field
            let idInput = form.querySelector('input[name="id"]') as HTMLInputElement;
            if (!idInput) {
              idInput = document.createElement('input');
              idInput.type = 'hidden';
              idInput.name = 'id';
              form.prepend(idInput);
            }
            idInput.value = post.id.toString();
            
            // Update other fields
            Object.entries(post).forEach(([key, value]) => {
              if (key === 'id') return;
              const input = form.querySelector(`[name="${key}"]`) as HTMLInputElement | HTMLTextAreaElement;
              if (input) {
                input.value = value as string;
              }
            });
          }
          
          postForm?.classList.add('visible');
          formTitle!.textContent = 'Edit Post';
        });
      });

      // Handle delete button clicks
      document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', async (e) => {
          if (!confirm('Are you sure you want to delete this post?')) return;

          const postId = (e.target as HTMLElement).dataset.id;
          try {
            const response = await fetch(`/api/posts/${postId}`, {
              method: 'DELETE',
            });

            if (!response.ok) {
              throw new Error('Failed to delete post');
            }

            // Reload the page to show updated list
            window.location.reload();
          } catch (error) {
            console.error('Error:', error);
            alert('Failed to delete post');
          }
        });
      });
    </script>
  </body>
</html>
