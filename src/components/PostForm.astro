---
import ImageSearch from './ImageSearch.astro';

const { post } = Astro.props;
const isEditing = !!post?.id;

console.log('Rendering PostForm with ImageSearch component');
---

<form class="post-form" data-is-editing={isEditing}>
    {isEditing && <input type="hidden" name="id" value={post.id} />}
    
    <div class="form-group">
        <label for="title">Title:</label>
        <input 
            type="text" 
            id="title" 
            name="title" 
            value={post?.title || ''}
            required
        />
    </div>

    <div class="form-group">
        <label for="slug">Slug:</label>
        <input 
            type="text" 
            id="slug" 
            name="slug" 
            value={post?.slug || ''}
            required
        />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <textarea 
            id="description" 
            name="description" 
            rows="3"
        >{post?.description || ''}</textarea>
        <p class="help-text">This description will help guide the AI in generating content.</p>
    </div>

    <div class="form-group">
        <label for="content">Content:</label>
        <textarea 
            id="content" 
            name="content" 
            rows="10" 
            required
        >{post?.content || ''}</textarea>
    </div>

    <div class="form-group">
        <label>Hero Image:</label>
        <div class="hero-image-section">
            <input 
                type="text" 
                id="heroImage" 
                name="heroImage" 
                value={post?.heroImage || ''}
                readonly
                placeholder="Select an image below"
            />
            <div class="hero-image-preview">
                <img id="heroImagePreview" src={post?.heroImage || ''} style="display: none;" />
            </div>
        </div>
    </div>

    <div class="form-group">
        <label>Search and Select an Image:</label>
        <p class="help-text">Click the Search button to find images based on your title and description.</p>
        <div class="image-search-wrapper">
            <ImageSearch />
        </div>
        <button type="button" id="useContentButton" class="secondary-btn">Use Title & Description</button>
    </div>

    <button type="submit" class="submit-btn">
        {isEditing ? 'Save Post' : 'Generate Post'}
    </button>

    <div class="loading-overlay" style="display: none;">
        <div class="loading-spinner"></div>
        <p>Generating content with AI...</p>
    </div>
</form>

<style>
    .post-form {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        position: relative;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 20px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        color: #333;
    }

    .help-text {
        margin-top: 4px;
        font-size: 0.9em;
        color: #666;
    }

    input[type="text"],
    textarea {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
    }

    input[readonly] {
        background-color: #f5f5f5;
        cursor: not-allowed;
    }

    .hero-image-section {
        margin-top: 10px;
    }

    .hero-image-preview {
        margin-top: 10px;
        border-radius: 4px;
        overflow: hidden;
        max-height: 300px;
    }

    .hero-image-preview img {
        width: 100%;
        height: auto;
        border-radius: 4px;
    }

    .image-search-wrapper {
        margin-top: 10px;
    }

    .submit-btn, .secondary-btn {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }

    .submit-btn {
        background-color: #4a9eff;
        color: white;
        margin-top: 20px;
    }

    .secondary-btn {
        background-color: #f0f0f0;
        color: #333;
        margin-top: 10px;
    }

    .submit-btn:hover {
        background-color: #357abd;
    }

    .secondary-btn:hover {
        background-color: #e0e0e0;
    }

    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        border-radius: 8px;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #4a9eff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

<script>
    const form = document.querySelector('.post-form') as HTMLFormElement;
    const loadingOverlay = document.querySelector('.loading-overlay') as HTMLElement;
    const titleInput = document.getElementById('title') as HTMLInputElement;
    const descriptionInput = document.getElementById('description') as HTMLTextAreaElement;
    const heroImageInput = document.getElementById('heroImage') as HTMLInputElement;
    const heroImagePreview = document.getElementById('heroImagePreview') as HTMLImageElement;
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    const useContentButton = document.getElementById('useContentButton') as HTMLButtonElement;

    function updateHeroImagePreview() {
        const imageUrl = heroImageInput.value.trim();
        if (imageUrl) {
            heroImagePreview.src = imageUrl;
            heroImagePreview.style.display = 'block';
        } else {
            heroImagePreview.style.display = 'none';
        }
    }

    if (form) {
        console.log('PostForm script initialized');

        // Use title and description for search when button is clicked
        useContentButton?.addEventListener('click', (e) => {
            e.preventDefault(); // Prevent form submission
            const title = titleInput.value.trim();
            const description = descriptionInput.value.trim();
            if (title || description) {
                const searchQuery = `${title} ${description}`.trim();
                console.log('Using content for search:', searchQuery);
                if (searchInput) {
                    searchInput.value = searchQuery;
                }
            }
        });

        // Listen for image selection from ImageSearch component
        document.addEventListener('imageSelected', ((e: CustomEvent) => {
            console.log('Image selected:', e.detail.imageUrl);
            heroImageInput.value = e.detail.imageUrl;
            updateHeroImagePreview();
        }) as EventListener);

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(form);
            const data: Record<string, string> = {};
            
            formData.forEach((value, key) => {
                data[key] = value.toString();
            });
            
            const isEditing = form.dataset.isEditing === 'true';
            const id = data.id;
            const method = isEditing ? 'PUT' : 'POST';
            const url = isEditing ? `/api/posts/${id}` : '/api/posts';

            try {
                if (!isEditing) {
                    loadingOverlay.style.display = 'flex';
                }

                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to save post');
                }
                
                window.location.href = '/admin';
            } catch (error) {
                console.error('Error:', error);
                alert(error instanceof Error ? error.message : 'Failed to save post');
            } finally {
                loadingOverlay.style.display = 'none';
            }
        });

        // Initial preview if heroImage exists
        updateHeroImagePreview();
    }
</script>
