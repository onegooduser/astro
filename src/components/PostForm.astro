---
interface Props {
    post?: {
        id?: number;
        title: string;
        slug: string;
        description: string;
        content: string;
        heroImage?: string;
    };
}

const { post } = Astro.props;
const isEditing = !!post?.id;
---

<form class="post-form" data-is-editing={isEditing}>
    {isEditing && <input type="hidden" name="id" value={post.id} />}
    
    <div class="form-group">
        <label for="title">Title:</label>
        <input 
            type="text" 
            id="title" 
            name="title" 
            value={post?.title || ''}
            required
        />
    </div>

    <div class="form-group">
        <label for="slug">Slug:</label>
        <input 
            type="text" 
            id="slug" 
            name="slug" 
            value={post?.slug || ''}
            required
        />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <textarea 
            id="description" 
            name="description" 
            rows="3"
        >{post?.description || ''}</textarea>
        <p class="help-text">This description will help guide the AI in generating relevant content.</p>
    </div>

    {isEditing && (
        <div class="form-group">
            <label for="content">Content:</label>
            <textarea 
                id="content" 
                name="content" 
                rows="10" 
                required
            >{post?.content || ''}</textarea>
        </div>
    )}

    <div class="form-group">
        <label for="heroImage">Hero Image URL:</label>
        <input 
            type="text" 
            id="heroImage" 
            name="heroImage" 
            value={post?.heroImage || ''}
        />
    </div>

    <button type="submit" class="submit-btn">
        {isEditing ? 'Update Post' : 'Create Post'}
    </button>

    <div class="loading-overlay" style="display: none;">
        <div class="loading-spinner"></div>
        <p>Generating content with AI...</p>
    </div>
</form>

<style>
    .post-form {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        position: relative;
    }

    .form-group {
        margin-bottom: 20px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .help-text {
        margin-top: 4px;
        font-size: 0.9em;
        color: #666;
    }

    input[type="text"],
    textarea {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
    }

    .submit-btn {
        background-color: #4a9eff;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }

    .submit-btn:hover {
        background-color: #357abd;
    }

    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #4a9eff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

<script>
    const form = document.querySelector('.post-form') as HTMLFormElement;
    const loadingOverlay = document.querySelector('.loading-overlay') as HTMLElement;
    
    if (form) {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(form);
            const data: Record<string, string> = {};
            
            formData.forEach((value, key) => {
                data[key] = value.toString();
            });
            
            const isEditing = form.dataset.isEditing === 'true';
            const id = data.id;
            const method = isEditing ? 'PUT' : 'POST';
            const url = isEditing ? `/api/posts/${id}` : '/api/posts';

            try {
                if (!isEditing) {
                    loadingOverlay.style.display = 'flex';
                }

                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to save post');
                }
                
                window.location.href = '/admin';
            } catch (error) {
                console.error('Error:', error);
                alert(error instanceof Error ? error.message : 'Failed to save post');
            } finally {
                loadingOverlay.style.display = 'none';
            }
        });
    }
</script>
